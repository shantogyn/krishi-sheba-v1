import 'package:flutter/material.dart';

void main() {
  runApp(const SmartKrishiApp());
}

class SmartKrishiApp extends StatefulWidget {
  const SmartKrishiApp({super.key});

  @override
  State<SmartKrishiApp> createState() => _SmartKrishiAppState();
}

class _SmartKrishiAppState extends State<SmartKrishiApp> {
  bool isBangla = true;

  final List<FeatureItem> FeaturesBangla = const [
    FeatureItem(
      icon: Icons.local_florist,
      title: 'ЁЯМ┐ ржлрж╕рж▓рзЗрж░ рж░рзЛржЧ ржирж┐рж░рзНржгрзЯ',
      subtitle:
          'AI ржоржбрзЗрж▓ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржкрж╛рждрж╛рж░ ржЫржмрж┐ ржжрзЗржЦрзЗ рж░рзЛржЧ рж╢ржирж╛ржХрзНржд ржХрж░рзЗ ржПржмржВ ржЪрж┐ржХрж┐рзОрж╕рж╛ рж╕рж╛ржЬрзЗрж╕рзНржЯ ржХрж░рзЗред',
    ),
    FeatureItem(
      icon: Icons.science,
      title: 'ЁЯзк ржорж╛ржЯрж┐ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржУ рж╕рж╛рж░ ржкрж░рж╛ржорж░рзНрж╢',
      subtitle: 'pH ржУ NPK ржбрзЗржЯрж╛ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рзЗ ржЙржкржпрзБржХрзНржд рж╕рж╛рж░ ржУ ржбрзЛржЬ ржирж┐рж░рзНржзрж╛рж░ржг ржХрж░рзЗред',
    ),
    FeatureItem(
      icon: Icons.show_chart,
      title: 'ЁЯУИ ржмрж╛ржЬрж╛рж░ ржжрж╛ржорзЗрж░ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕',
      subtitle:
          'AI ржоржбрзЗрж▓ ржжрж┐рзЯрзЗ ржЖржЧрж╛ржо ржлрж╕рж▓рзЗрж░ ржжрж╛ржо ржЕржирзБржорж╛ржи ржХрж░рзЗ рж▓рж╛ржнржЬржиржХ ржЪрж╛рж╖рзЗ рж╕рж╣рж╛рзЯрждрж╛ ржХрж░рзЗред',
    ),
    FeatureItem(
      icon: Icons.cloud_queue,
      title: 'ЁЯМж ржЖржмрж╣рж╛ржУрзЯрж╛ржнрж┐рждрзНрждрж┐ржХ ржЪрж╛рж╖ ржкрж░рж┐ржХрж▓рзНржкржирж╛',
      subtitle:
          'ржЖржмрж╣рж╛ржУрзЯрж╛рж░ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕ ржУ ржорж╛ржЯрж┐рж░ ржбрзЗржЯрж╛ ржжрзЗржЦрзЗ ржЪрж╛рж╖рзЗрж░ рж╕ржорзЯ ржУ ржлрж╕рж▓ ржмрж╛ржЫрж╛ржЗрзЯрзЗ рж╕рж╣рж╛рзЯрждрж╛ ржХрж░рзЗред',
    ),
    FeatureItem(
      icon: Icons.groups,
      title: 'ЁЯдЭ ржХрзГрж╖ржХ-ржЯрзБ-ржХрзГрж╖ржХ ржЬрзНржЮрж╛ржи ржмрж┐ржирж┐ржорзЯ',
      subtitle:
          'ржХржорж┐ржЙржирж┐ржЯрж┐ ржлрзЛрж░рж╛ржорзЗрж░ ржорж╛ржзрзНржпржорзЗ ржХрзГрж╖ржХрж░рж╛ ржПржХрзЗ ржЕржкрж░рзЗрж░ ржЕржнрж┐ржЬрзНржЮрждрж╛ ржУ ржкрж░рж╛ржорж░рзНрж╢ ржмрж┐ржирж┐ржорзЯ ржХрж░рждрзЗ ржкрж╛рж░рзЗред',
    ),
    FeatureItem(
      icon: Icons.agriculture,
      title: 'ЁЯМ╛ ржлрж▓ржирзЗрж░ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕',
      subtitle:
          'ржмрзАржЬ, ржорзМрж╕рзБржо ржУ ржЬржорж┐рж░ рждржерзНржпрзЗрж░ ржЙржкрж░ ржнрж┐рждрзНрждрж┐ ржХрж░рзЗ рж╕ржорзНржнрж╛ржмрзНржп ржлрж▓ржирзЗрж░ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕ ржжрзЗрзЯред',
    ),
    FeatureItem(
      icon: Icons.mic,
      title: 'ЁЯОЩ ржнрзЯрзЗрж╕ ржХржорж╛ржирзНржб ржлрж┐ржЪрж╛рж░ (Future Plan)',
      subtitle:
          'ржнрзЯрзЗрж╕ ржжрж┐рзЯрзЗ ржЕрзНржпрж╛ржк ржмрзНржпржмрж╣рж╛рж░, ржпрзЗржЦрж╛ржирзЗ ржХрзЛржирзЛ ржмрж╛ржЯржи ржкрзНрж░рзЗрж╕рзЗрж░ ржжрж░ржХрж╛рж░ ржирзЗржЗ (hands-free)ред',
    ),
    FeatureItem(
      icon: Icons.eco,
      title: 'ЁЯМН ржХрж╛рж░рзНржмржи ржирж┐ржГрж╕рж░ржг рж╣рзНрж░рж╛рж╕',
      subtitle: 'AI ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржкрж░рж┐ржмрзЗрж╢ржмрж╛ржирзНржзржм ржХрзГрж╖рж┐ржХрж╛ржЬ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзЗред',
    ),
    FeatureItem(
      icon: Icons.help,
      title: 'тЭУ рж╕рж╛рж╣рж╛ржпрзНржп ржУ рж╕ржорж░рзНрже',
      subtitle: 'AI ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржкрж░рж┐ржмрзЗрж╢ржмрж╛ржирзНржзржм ржХрзГрж╖рж┐ржХрж╛ржЬ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзЗред',
    ),
  ];

  final List<FeatureItem> FeaturesEnglish = const [
    FeatureItem(
      icon: Icons.local_florist,
      title: 'ЁЯМ┐ Crop Disease Detection',
      subtitle:
          'Uses AI model to identify diseases by leaf images and suggest treatment.',
    ),
    FeatureItem(
      icon: Icons.science,
      title: 'ЁЯзк Soil Analysis & Fertilizer Recommendation',
      subtitle:
          'Analyzes pH and NPK data to determine suitable fertilizers and dosages.',
    ),
    FeatureItem(
      icon: Icons.show_chart,
      title: 'ЁЯУИ Market Price Forecast',
      subtitle:
          'AI model predicts future crop prices to help profitable farming.',
    ),
    FeatureItem(
      icon: Icons.cloud_queue,
      title: 'ЁЯМж Weather-Based Crop Planning',
      subtitle:
          'Helps choose crops and planting time based on weather and soil data.',
    ),
    FeatureItem(
      icon: Icons.groups,
      title: 'ЁЯдЭ Farmer-to-Farmer Knowledge Sharing',
      subtitle:
          'Farmers exchange experience and advice through community forums.',
    ),
    FeatureItem(
      icon: Icons.agriculture,
      title: 'ЁЯМ╛ Crop Yield Prediction',
      subtitle:
          'Predicts potential yield based on seed, season, and land data.',
    ),
    FeatureItem(
      icon: Icons.mic,
      title: 'ЁЯОЩ Voice Command Feature ',
      subtitle: 'Use app by voice without pressing any button (hands-free).',
    ),
    FeatureItem(
      icon: Icons.eco,
      title: 'ЁЯМН Carbon Emission Reduction',
      subtitle: 'Ensures eco-friendly farming using AI.',
    ),
    FeatureItem(
      icon: Icons.help,
      title: 'тЭУ Help & Support',
      subtitle: 'Get assistance and support for using the app effectively.',
    ),
  ];

  @override
  Widget build(BuildContext context) {
    final slide1Features = isBangla ? FeaturesBangla : FeaturesEnglish;

    return MaterialApp(
      title: isBangla ? 'Krishi Sheba' : 'Krishi Sheba',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.green.shade700),
        useMaterial3: true,
      ),
      home: Scaffold(
        appBar: AppBar(
          title: Text(isBangla ? 'Krishi Sheba' : 'Krishi Sheba'),
          backgroundColor: Colors.green.shade700,
          actions: [
            IconButton(
              tooltip: isBangla ? 'Switch to English' : 'ржмрж╛ржВрж▓рж╛рзЯ ржкрж░рж┐ржмрж░рзНрждржи',
              icon: const Icon(Icons.language),
              onPressed: () {
                setState(() {
                  isBangla = !isBangla;
                });
              },
            ),
          ],
        ),
        body: ListView(
          padding: const EdgeInsets.all(16),
          children: [
            const SizedBox(height: 10),
            ...slide1Features.map((feature) => FeatureTile(feature: feature)),
            const SizedBox(height: 30),
          ],
        ),
      ),
    );
  }
}

class FeatureItem {
  final IconData icon;
  final String title;
  final String subtitle;
  final String? trailingText;

  const FeatureItem({
    required this.icon,
    required this.title,
    required this.subtitle,
    this.trailingText,
  });
}

class FeatureTile extends StatelessWidget {
  final FeatureItem feature;

  const FeatureTile({super.key, required this.feature});

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.symmetric(vertical: 8),
      elevation: 3,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
      child: ListTile(
        leading: Icon(feature.icon, size: 32, color: Colors.green.shade700),
        title: Text(
          feature.title,
          style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
        ),
        subtitle: Text(feature.subtitle),
        trailing: feature.trailingText != null
            ? Text(
                feature.trailingText!,
                style: const TextStyle(
                  color: Colors.orange,
                  fontWeight: FontWeight.w600,
                ),
              )
            : null,
      ),
    );
  }
}
